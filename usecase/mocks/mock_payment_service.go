// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IPaymentServiceProvider is an autogenerated mock type for the IPaymentServiceProvider type
type IPaymentServiceProvider struct {
	mock.Mock
}

type IPaymentServiceProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *IPaymentServiceProvider) EXPECT() *IPaymentServiceProvider_Expecter {
	return &IPaymentServiceProvider_Expecter{mock: &_m.Mock}
}

// Deposit provides a mock function with given fields: ctx, amount, currency, note
func (_m *IPaymentServiceProvider) Deposit(ctx context.Context, amount float64, currency string, note string) error {
	ret := _m.Called(ctx, amount, currency, note)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, string, string) error); ok {
		r0 = rf(ctx, amount, currency, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPaymentServiceProvider_Deposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deposit'
type IPaymentServiceProvider_Deposit_Call struct {
	*mock.Call
}

// Deposit is a helper method to define mock.On call
//   - ctx context.Context
//   - amount float64
//   - currency string
//   - note string
func (_e *IPaymentServiceProvider_Expecter) Deposit(ctx interface{}, amount interface{}, currency interface{}, note interface{}) *IPaymentServiceProvider_Deposit_Call {
	return &IPaymentServiceProvider_Deposit_Call{Call: _e.mock.On("Deposit", ctx, amount, currency, note)}
}

func (_c *IPaymentServiceProvider_Deposit_Call) Run(run func(ctx context.Context, amount float64, currency string, note string)) *IPaymentServiceProvider_Deposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *IPaymentServiceProvider_Deposit_Call) Return(_a0 error) *IPaymentServiceProvider_Deposit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPaymentServiceProvider_Deposit_Call) RunAndReturn(run func(context.Context, float64, string, string) error) *IPaymentServiceProvider_Deposit_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, amount, currency, note
func (_m *IPaymentServiceProvider) Withdraw(ctx context.Context, amount float64, currency string, note string) error {
	ret := _m.Called(ctx, amount, currency, note)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, string, string) error); ok {
		r0 = rf(ctx, amount, currency, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPaymentServiceProvider_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type IPaymentServiceProvider_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - amount float64
//   - currency string
//   - note string
func (_e *IPaymentServiceProvider_Expecter) Withdraw(ctx interface{}, amount interface{}, currency interface{}, note interface{}) *IPaymentServiceProvider_Withdraw_Call {
	return &IPaymentServiceProvider_Withdraw_Call{Call: _e.mock.On("Withdraw", ctx, amount, currency, note)}
}

func (_c *IPaymentServiceProvider_Withdraw_Call) Run(run func(ctx context.Context, amount float64, currency string, note string)) *IPaymentServiceProvider_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *IPaymentServiceProvider_Withdraw_Call) Return(_a0 error) *IPaymentServiceProvider_Withdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPaymentServiceProvider_Withdraw_Call) RunAndReturn(run func(context.Context, float64, string, string) error) *IPaymentServiceProvider_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPaymentServiceProvider creates a new instance of IPaymentServiceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPaymentServiceProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPaymentServiceProvider {
	mock := &IPaymentServiceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
