// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "go-clean-template/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// ITransactionRepository is an autogenerated mock type for the ITransactionRepository type
type ITransactionRepository struct {
	mock.Mock
}

type ITransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ITransactionRepository) EXPECT() *ITransactionRepository_Expecter {
	return &ITransactionRepository_Expecter{mock: &_m.Mock}
}

// GetBalanceByWalletID provides a mock function with given fields: ctx, walletID
func (_m *ITransactionRepository) GetBalanceByWalletID(ctx context.Context, walletID string) (float64, error) {
	ret := _m.Called(ctx, walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceByWalletID")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, error)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, walletID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITransactionRepository_GetBalanceByWalletID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalanceByWalletID'
type ITransactionRepository_GetBalanceByWalletID_Call struct {
	*mock.Call
}

// GetBalanceByWalletID is a helper method to define mock.On call
//   - ctx context.Context
//   - walletID string
func (_e *ITransactionRepository_Expecter) GetBalanceByWalletID(ctx interface{}, walletID interface{}) *ITransactionRepository_GetBalanceByWalletID_Call {
	return &ITransactionRepository_GetBalanceByWalletID_Call{Call: _e.mock.On("GetBalanceByWalletID", ctx, walletID)}
}

func (_c *ITransactionRepository_GetBalanceByWalletID_Call) Run(run func(ctx context.Context, walletID string)) *ITransactionRepository_GetBalanceByWalletID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ITransactionRepository_GetBalanceByWalletID_Call) Return(_a0 float64, _a1 error) *ITransactionRepository_GetBalanceByWalletID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITransactionRepository_GetBalanceByWalletID_Call) RunAndReturn(run func(context.Context, string) (float64, error)) *ITransactionRepository_GetBalanceByWalletID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinkedAccountByID provides a mock function with given fields: ctx, accountID
func (_m *ITransactionRepository) GetLinkedAccountByID(ctx context.Context, accountID string) (*entity.LinkedAccount, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkedAccountByID")
	}

	var r0 *entity.LinkedAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.LinkedAccount, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.LinkedAccount); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.LinkedAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITransactionRepository_GetLinkedAccountByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinkedAccountByID'
type ITransactionRepository_GetLinkedAccountByID_Call struct {
	*mock.Call
}

// GetLinkedAccountByID is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID string
func (_e *ITransactionRepository_Expecter) GetLinkedAccountByID(ctx interface{}, accountID interface{}) *ITransactionRepository_GetLinkedAccountByID_Call {
	return &ITransactionRepository_GetLinkedAccountByID_Call{Call: _e.mock.On("GetLinkedAccountByID", ctx, accountID)}
}

func (_c *ITransactionRepository_GetLinkedAccountByID_Call) Run(run func(ctx context.Context, accountID string)) *ITransactionRepository_GetLinkedAccountByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ITransactionRepository_GetLinkedAccountByID_Call) Return(_a0 *entity.LinkedAccount, _a1 error) *ITransactionRepository_GetLinkedAccountByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITransactionRepository_GetLinkedAccountByID_Call) RunAndReturn(run func(context.Context, string) (*entity.LinkedAccount, error)) *ITransactionRepository_GetLinkedAccountByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByID provides a mock function with given fields: ctx, transID
func (_m *ITransactionRepository) GetTransactionByID(ctx context.Context, transID string) (*entity.Transaction, error) {
	ret := _m.Called(ctx, transID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Transaction, error)); ok {
		return rf(ctx, transID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Transaction); ok {
		r0 = rf(ctx, transID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITransactionRepository_GetTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByID'
type ITransactionRepository_GetTransactionByID_Call struct {
	*mock.Call
}

// GetTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - transID string
func (_e *ITransactionRepository_Expecter) GetTransactionByID(ctx interface{}, transID interface{}) *ITransactionRepository_GetTransactionByID_Call {
	return &ITransactionRepository_GetTransactionByID_Call{Call: _e.mock.On("GetTransactionByID", ctx, transID)}
}

func (_c *ITransactionRepository_GetTransactionByID_Call) Run(run func(ctx context.Context, transID string)) *ITransactionRepository_GetTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ITransactionRepository_GetTransactionByID_Call) Return(_a0 *entity.Transaction, _a1 error) *ITransactionRepository_GetTransactionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITransactionRepository_GetTransactionByID_Call) RunAndReturn(run func(context.Context, string) (*entity.Transaction, error)) *ITransactionRepository_GetTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWalletByID provides a mock function with given fields: ctx, walletID
func (_m *ITransactionRepository) GetWalletByID(ctx context.Context, walletID string) (*entity.Wallet, error) {
	ret := _m.Called(ctx, walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletByID")
	}

	var r0 *entity.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Wallet, error)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Wallet); ok {
		r0 = rf(ctx, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ITransactionRepository_GetWalletByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWalletByID'
type ITransactionRepository_GetWalletByID_Call struct {
	*mock.Call
}

// GetWalletByID is a helper method to define mock.On call
//   - ctx context.Context
//   - walletID string
func (_e *ITransactionRepository_Expecter) GetWalletByID(ctx interface{}, walletID interface{}) *ITransactionRepository_GetWalletByID_Call {
	return &ITransactionRepository_GetWalletByID_Call{Call: _e.mock.On("GetWalletByID", ctx, walletID)}
}

func (_c *ITransactionRepository_GetWalletByID_Call) Run(run func(ctx context.Context, walletID string)) *ITransactionRepository_GetWalletByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ITransactionRepository_GetWalletByID_Call) Return(_a0 *entity.Wallet, _a1 error) *ITransactionRepository_GetWalletByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ITransactionRepository_GetWalletByID_Call) RunAndReturn(run func(context.Context, string) (*entity.Wallet, error)) *ITransactionRepository_GetWalletByID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTransaction provides a mock function with given fields: ctx, trans
func (_m *ITransactionRepository) SaveTransaction(ctx context.Context, trans *entity.Transaction) error {
	ret := _m.Called(ctx, trans)

	if len(ret) == 0 {
		panic("no return value specified for SaveTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Transaction) error); ok {
		r0 = rf(ctx, trans)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITransactionRepository_SaveTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTransaction'
type ITransactionRepository_SaveTransaction_Call struct {
	*mock.Call
}

// SaveTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - trans *entity.Transaction
func (_e *ITransactionRepository_Expecter) SaveTransaction(ctx interface{}, trans interface{}) *ITransactionRepository_SaveTransaction_Call {
	return &ITransactionRepository_SaveTransaction_Call{Call: _e.mock.On("SaveTransaction", ctx, trans)}
}

func (_c *ITransactionRepository_SaveTransaction_Call) Run(run func(ctx context.Context, trans *entity.Transaction)) *ITransactionRepository_SaveTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Transaction))
	})
	return _c
}

func (_c *ITransactionRepository_SaveTransaction_Call) Return(_a0 error) *ITransactionRepository_SaveTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ITransactionRepository_SaveTransaction_Call) RunAndReturn(run func(context.Context, *entity.Transaction) error) *ITransactionRepository_SaveTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTransactionStatus provides a mock function with given fields: ctx, transID, status
func (_m *ITransactionRepository) UpdateTransactionStatus(ctx context.Context, transID string, status entity.TransactionStatus) error {
	ret := _m.Called(ctx, transID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransactionStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.TransactionStatus) error); ok {
		r0 = rf(ctx, transID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITransactionRepository_UpdateTransactionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransactionStatus'
type ITransactionRepository_UpdateTransactionStatus_Call struct {
	*mock.Call
}

// UpdateTransactionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - transID string
//   - status entity.TransactionStatus
func (_e *ITransactionRepository_Expecter) UpdateTransactionStatus(ctx interface{}, transID interface{}, status interface{}) *ITransactionRepository_UpdateTransactionStatus_Call {
	return &ITransactionRepository_UpdateTransactionStatus_Call{Call: _e.mock.On("UpdateTransactionStatus", ctx, transID, status)}
}

func (_c *ITransactionRepository_UpdateTransactionStatus_Call) Run(run func(ctx context.Context, transID string, status entity.TransactionStatus)) *ITransactionRepository_UpdateTransactionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.TransactionStatus))
	})
	return _c
}

func (_c *ITransactionRepository_UpdateTransactionStatus_Call) Return(_a0 error) *ITransactionRepository_UpdateTransactionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ITransactionRepository_UpdateTransactionStatus_Call) RunAndReturn(run func(context.Context, string, entity.TransactionStatus) error) *ITransactionRepository_UpdateTransactionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewITransactionRepository creates a new instance of ITransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITransactionRepository {
	mock := &ITransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
